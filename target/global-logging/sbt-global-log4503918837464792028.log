[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Consta\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Consta\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Amazon.com Inc. Java 1.8.0_322)
[debug]       Load.loadUnit: plugins took 65.5471ms
[debug]       Load.loadUnit: defsScala took 0.2611ms
[debug] [Loading] Scanning directory C:\Users\Consta\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Consta\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.5463 ms
[debug]           Load.resolveProject(global-plugins) took 41.3505ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Consta\.sbt\1.0\plugins, plugins: List(<none>))) took 77.9035ms
[debug] [Loading] Done in C:\Users\Consta\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 95.3507ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2109ms
[debug]     Load.loadUnit(file:/C:/Users/Consta/.sbt/1.0/plugins/, ...) took 167.9646ms
[debug]   Load.apply: load took 323.0442ms
[debug]   Load.apply: resolveProjects took 5.2157ms
[debug]   Load.apply: finalTransforms took 52.4384ms
[debug]   Load.apply: config.delegates took 6.1062ms
[debug]   Load.apply: Def.make(settings)... took 385.3418ms
[debug]   Load.apply: structureIndex took 69.0554ms
[debug]   Load.apply: mkStreams took 1.2666ms
[info] loading global plugins from C:\Users\Consta\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6947.0008ms
[debug]           Load.loadUnit: plugins took 19.4497ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\Consta\Desktop\facultate\fac\H2-word-tree\project
[debug]             Load.loadUnit: mkEval took 8.5735ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Consta\Desktop\facultate\fac\H2-word-tree\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0489 ms
[info] loading settings for project h2-word-tree-build from idea.sbt ...
[debug]               Load.resolveProject(h2-word-tree-build) took 2.0805ms
[debug]             Load.loadTransitive: finalizeProject(Project(id h2-word-tree-build, base: C:\Users\Consta\Desktop\facultate\fac\H2-word-tree\project, plugins: List(<none>))) took 3.4755ms
[debug] [Loading] Done in C:\Users\Consta\Desktop\facultate\fac\H2-word-tree\project, returning: (h2-word-tree-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1641.0241ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.4488ms
[debug]         Load.loadUnit(file:/C:/Users/Consta/Desktop/facultate/fac/H2-word-tree/project/, ...) took 1664.6248ms
[debug]       Load.apply: load took 1665.7014ms
[debug]       Load.apply: resolveProjects took 0.0832ms
[debug]       Load.apply: finalTransforms took 5.6445ms
[debug]       Load.apply: config.delegates took 0.2418ms
[debug]       Load.apply: Def.make(settings)... took 61.3452ms
[debug]       Load.apply: structureIndex took 15.8045ms
[debug]       Load.apply: mkStreams took 0.0019ms
[info] loading project definition from C:\Users\Consta\Desktop\facultate\fac\H2-word-tree\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2969.4279ms
[debug]     Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Users\Consta\Desktop\facultate\fac\H2-word-tree
[debug]       Load.loadUnit: mkEval took 0.1681ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.768 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 24.7181ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Consta\Desktop\facultate\fac\H2-word-tree, plugins: List(<none>))) took 27.9007ms
[debug] [Loading] Done in C:\Users\Consta\Desktop\facultate\fac\H2-word-tree, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1003.7536ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.5659ms
[debug]   Load.loadUnit(file:/C:/Users/Consta/Desktop/facultate/fac/H2-word-tree/, ...) took 3978.3506ms
[debug] Load.apply: load took 3979.3466ms
[debug] Load.apply: resolveProjects took 0.0808ms
[debug] Load.apply: finalTransforms took 21.3179ms
[debug] Load.apply: config.delegates took 0.2102ms
[debug] Load.apply: Def.make(settings)... took 72.5986ms
[debug] Load.apply: structureIndex took 22.1798ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to WordTree (in build file:/C:/Users/Consta/Desktop/facultate/fac/H2-word-tree/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58000 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58000, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WordTree (in build file:/C:/Users/Consta/Desktop/facultate/fac/H2-word-tree/)
[debug] > Exec(idea-shell, None, None)
